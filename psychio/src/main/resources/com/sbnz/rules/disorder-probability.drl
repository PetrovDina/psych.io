package com.sbnz.rules;

import com.sbnz.psychio.model.Examination;
import com.sbnz.psychio.model.DisorderGroupProbability;
import com.sbnz.psychio.model.StatementResponse;
import com.sbnz.psychio.model.DiagnosisProbability;

import com.sbnz.psychio.model.enums.DisorderGroupName;
import com.sbnz.psychio.model.enums.Response;



rule "Anorexia rule"
    no-loop
    agenda-group "disorder-group-probability"
	when
	    $examination : Examination(bmi < 16, bmi > 0, statementsAnswered == true)
		$disorderGroupProbability : DisorderGroupProbability(examination == $examination, disorderGroup.name == DisorderGroupName.EATING_DISORDERS)
	    //TODO fali $diagnosis : Diagnosis
        //TODO fali i ovde accumulate


    then
		//create diagnosis
		System.out.println("Anorexia predicted");	
end




rule "Bulimia rule"
    no-loop
    agenda-group "disorder-group-probability"
	when
		$examination : Examination(bmi >= 16, statementsAnswered == true)
        $disorderGroupProbability : DisorderGroupProbability(examination == $examination, disorderGroup.name == DisorderGroupName.EATING_DISORDERS)
        //TODO fali $diagnosis : Diagnosis
        //TODO fali i ovde accumulate
	then
		System.out.println("Bulimia predicted");
        //Todo insert patient diagnosis prediction

end



//TODO: NOT TESTED, ONLY WRITTEN
//TODO -> ADD MUTUAL EXCLUSION?? SALIENCE -> https://github.com/Andjelaaa/SBNZ-primer/blob/main/src/main/resources/cdss_simpler/ZaOcenu7.drl
//Check if logic with negative Response enum values works
rule "Concrete non eating disorders prediction rule"
    no-loop
    agenda-group "disorder-group-probability"
    when
        $examination : Examination($statementResponses : statementResponses, statementsAnswered == true)
        $disorderGroupProbability : DisorderGroupProbability(examination == $examination, disorderGroup.name != DisorderGroupName.EATING_DISORDERS)
        $diagnosis : Diagnosis(disorderGroup == $disorderGroupProbability)
        Double($score: this, this >= $diagnosis.getMinimumScore()) from accumulate(
        	StatementResponse($statementResponse : this, $diagnosis.isStatementOccurent(statement)) from $statementResponses,
        	sum(Response.getResponseValue($statementResponse.getResponse()) * $diagnosis.getStatementOccurence($statementResponse.getStatement()) * 1.0)
        )

    then
        System.out.println("-----DIAGNOSING: " + $diagnosis.getName());
        DiagnosisProbability $prob = new DiagnosisProbability();
		$prob.setDiagnosis($diagnosis);
		$prob.setExamination($examination);
		$prob.setProbability($score);

		insert($prob);

end

